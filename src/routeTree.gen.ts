/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TasksTaskIDRouteImport } from './routes/tasks/$taskID'
import { Route as ApiTrpcSplatRouteImport } from './routes/api/trpc/$'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksTaskIDRoute = TasksTaskIDRouteImport.update({
  id: '/tasks/$taskID',
  path: '/tasks/$taskID',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTrpcSplatRoute = ApiTrpcSplatRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tasks/$taskID': typeof TasksTaskIDRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tasks/$taskID': typeof TasksTaskIDRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/tasks/$taskID': typeof TasksTaskIDRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/tasks/$taskID' | '/api/trpc/$'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/tasks/$taskID' | '/api/trpc/$'
  id: '__root__' | '/' | '/tasks/$taskID' | '/api/trpc/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TasksTaskIDRoute: typeof TasksTaskIDRoute
  ApiTrpcSplatRoute: typeof ApiTrpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/$taskID': {
      id: '/tasks/$taskID'
      path: '/tasks/$taskID'
      fullPath: '/tasks/$taskID'
      preLoaderRoute: typeof TasksTaskIDRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TasksTaskIDRoute: TasksTaskIDRoute,
  ApiTrpcSplatRoute: ApiTrpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
